[{"C:\\React\\Todolist16\\todolist-16\\src\\index.tsx":"1","C:\\React\\Todolist16\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx":"2","C:\\React\\Todolist16\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"3","C:\\React\\Todolist16\\todolist-16\\src\\api\\todolists-api.ts":"4","C:\\React\\Todolist16\\todolist-16\\src\\app\\App.tsx":"5","C:\\React\\Todolist16\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx":"6","C:\\React\\Todolist16\\todolist-16\\src\\features\\Login\\Login.tsx":"7","C:\\React\\Todolist16\\todolist-16\\src\\features\\TodolistsList\\tasks-reducer.ts":"8","C:\\React\\Todolist16\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"9","C:\\React\\Todolist16\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"10","C:\\React\\Todolist16\\todolist-16\\src\\utils\\error-utils.ts":"11","C:\\React\\Todolist16\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts":"12","C:\\React\\Todolist16\\todolist-16\\src\\features\\Login\\auth-reducer.ts":"13","C:\\React\\Todolist16\\todolist-16\\src\\app\\app-reducer.ts":"14","C:\\React\\Todolist16\\todolist-16\\src\\app\\store.ts":"15"},{"size":722,"mtime":1617401481057,"results":"16","hashOfConfig":"17"},{"size":4019,"mtime":1617448244516,"results":"18","hashOfConfig":"17"},{"size":1773,"mtime":1596295538000,"results":"19","hashOfConfig":"17"},{"size":3088,"mtime":1617453309148,"results":"20","hashOfConfig":"17"},{"size":2583,"mtime":1617958459256,"results":"21","hashOfConfig":"17"},{"size":952,"mtime":1594154724000,"results":"22","hashOfConfig":"17"},{"size":3615,"mtime":1617447381414,"results":"23","hashOfConfig":"17"},{"size":5619,"mtime":1617723253122,"results":"24","hashOfConfig":"17"},{"size":4193,"mtime":1596715250000,"results":"25","hashOfConfig":"17"},{"size":1092,"mtime":1596716576000,"results":"26","hashOfConfig":"17"},{"size":811,"mtime":1596719330000,"results":"27","hashOfConfig":"17"},{"size":4585,"mtime":1597327450000,"results":"28","hashOfConfig":"17"},{"size":1972,"mtime":1617453109287,"results":"29","hashOfConfig":"17"},{"size":2126,"mtime":1617452824056,"results":"30","hashOfConfig":"17"},{"size":1182,"mtime":1617446984917,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1p78yx8",{"filePath":"35","messages":"36","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\React\\Todolist16\\todolist-16\\src\\index.tsx",[],["68","69"],"C:\\React\\Todolist16\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx",["70","71","72","73","74","75","76","77"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo|| !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","C:\\React\\Todolist16\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["78","79","80"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\React\\Todolist16\\todolist-16\\src\\api\\todolists-api.ts",[],"C:\\React\\Todolist16\\todolist-16\\src\\app\\App.tsx",["81"],"C:\\React\\Todolist16\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"C:\\React\\Todolist16\\todolist-16\\src\\features\\Login\\Login.tsx",["82"],"import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn=useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length <= 2) {\r\n                errors.password = \"Password length must be more then two\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (data) => {\r\n            dispatch(loginTC(data))\r\n            // formik.resetForm()\r\n        },\r\n    })\r\n    if (isLoggedIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.touched.email &&\r\n                            formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password &&\r\n                            formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                onChange={formik.handleChange}\r\n                                checked={formik.values.rememberMe}\r\n                                name=\"rememberMe\"\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n",["83","84"],"C:\\React\\Todolist16\\todolist-16\\src\\features\\TodolistsList\\tasks-reducer.ts",["85"],"C:\\React\\Todolist16\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["86","87","88","89","90","91"],"C:\\React\\Todolist16\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"C:\\React\\Todolist16\\todolist-16\\src\\utils\\error-utils.ts",[],"C:\\React\\Todolist16\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts",["92"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","C:\\React\\Todolist16\\todolist-16\\src\\features\\Login\\auth-reducer.ts",[],"C:\\React\\Todolist16\\todolist-16\\src\\app\\app-reducer.ts",[],"C:\\React\\Todolist16\\todolist-16\\src\\app\\store.ts",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":37,"column":8,"nodeType":"99","endLine":37,"endColumn":10,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"101","line":42,"column":8,"nodeType":"99","endLine":42,"endColumn":10,"suggestions":"102"},{"ruleId":"97","severity":1,"message":"101","line":47,"column":8,"nodeType":"99","endLine":47,"endColumn":10,"suggestions":"103"},{"ruleId":"97","severity":1,"message":"101","line":52,"column":8,"nodeType":"99","endLine":52,"endColumn":10,"suggestions":"104"},{"ruleId":"97","severity":1,"message":"101","line":57,"column":8,"nodeType":"99","endLine":57,"endColumn":10,"suggestions":"105"},{"ruleId":"97","severity":1,"message":"101","line":62,"column":8,"nodeType":"99","endLine":62,"endColumn":10,"suggestions":"106"},{"ruleId":"97","severity":1,"message":"101","line":67,"column":8,"nodeType":"99","endLine":67,"endColumn":10,"suggestions":"107"},{"ruleId":"97","severity":1,"message":"101","line":72,"column":8,"nodeType":"99","endLine":72,"endColumn":10,"suggestions":"108"},{"ruleId":"97","severity":1,"message":"109","line":15,"column":97,"nodeType":"99","endLine":15,"endColumn":130,"suggestions":"110"},{"ruleId":"97","severity":1,"message":"109","line":20,"column":8,"nodeType":"99","endLine":20,"endColumn":41,"suggestions":"111"},{"ruleId":"97","severity":1,"message":"109","line":24,"column":8,"nodeType":"99","endLine":24,"endColumn":41,"suggestions":"112"},{"ruleId":"97","severity":1,"message":"113","line":31,"column":8,"nodeType":"99","endLine":31,"endColumn":10,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":55,"column":28,"nodeType":"117","endLine":55,"endColumn":45},{"ruleId":"93","replacedBy":"118"},{"ruleId":"95","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":13,"column":94,"nodeType":"122","messageId":"123","endLine":13,"endColumn":96},{"ruleId":"97","severity":1,"message":"124","line":35,"column":8,"nodeType":"99","endLine":35,"endColumn":10,"suggestions":"125"},{"ruleId":"97","severity":1,"message":"109","line":39,"column":8,"nodeType":"99","endLine":39,"endColumn":42,"suggestions":"126"},{"ruleId":"97","severity":1,"message":"109","line":46,"column":8,"nodeType":"99","endLine":46,"endColumn":54,"suggestions":"127"},{"ruleId":"97","severity":1,"message":"109","line":48,"column":95,"nodeType":"99","endLine":48,"endColumn":134,"suggestions":"128"},{"ruleId":"97","severity":1,"message":"109","line":49,"column":101,"nodeType":"99","endLine":49,"endColumn":140,"suggestions":"129"},{"ruleId":"97","severity":1,"message":"109","line":50,"column":107,"nodeType":"99","endLine":50,"endColumn":146,"suggestions":"130"},{"ruleId":"120","severity":1,"message":"121","line":10,"column":45,"nodeType":"122","messageId":"123","endLine":10,"endColumn":47},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.","ArrayExpression",["133"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["134"],["135"],["136"],["137"],["138"],["139"],["140"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["141"],["142"],["143"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["144"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["131"],["132"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["145"],["146"],["147"],["148"],["149"],["150"],"no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"153","fix":"155"},{"desc":"153","fix":"156"},{"desc":"153","fix":"157"},{"desc":"153","fix":"158"},{"desc":"153","fix":"159"},{"desc":"153","fix":"160"},{"desc":"161","fix":"162"},{"desc":"161","fix":"163"},{"desc":"161","fix":"164"},{"desc":"153","fix":"165"},{"desc":"166","fix":"167"},{"desc":"161","fix":"168"},{"desc":"161","fix":"169"},{"desc":"161","fix":"170"},{"desc":"161","fix":"171"},{"desc":"161","fix":"172"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"173","text":"174"},"Update the dependencies array to be: [dispatch]",{"range":"175","text":"176"},{"range":"177","text":"176"},{"range":"178","text":"176"},{"range":"179","text":"176"},{"range":"180","text":"176"},{"range":"181","text":"176"},{"range":"182","text":"176"},"Update the dependencies array to be: [props]",{"range":"183","text":"184"},{"range":"185","text":"184"},{"range":"186","text":"184"},{"range":"187","text":"176"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"188","text":"189"},{"range":"190","text":"184"},{"range":"191","text":"184"},{"range":"192","text":"184"},{"range":"193","text":"184"},{"range":"194","text":"184"},[1318,1320],"[demo, dispatch, isLoggedIn]",[1489,1491],"[dispatch]",[1660,1662],[1865,1867],[2078,2080],[2279,2281],[2426,2428],[2605,2607],[765,798],"[props]",[1071,1104],[1261,1294],[935,937],[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],[1846,1892],[1991,2030],[2133,2172],[2281,2320]]